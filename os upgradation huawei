import paramiko
from datetime import datetime
import concurrent.futures
import time

start_time = datetime.now()
#SSH connection parameters
port = 22
username = "pankaj"
password = "radhe@123"

# Read the list of commands from a file
with open("Command_List.txt", "r") as c:
    command_list = c.read().split("\n")

# Read the list of devices from a file
with open("Device_List.txt", "r") as d:
    hosts = d.read().split("\n")

# Function to execute SSH commands.
def execute_ssh(ip):
    try:
        print("Try to login:", ip)
        conn = paramiko.SSHClient()
        conn.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        conn.connect(ip, port, username, password)
        comm = conn.invoke_shell()
        comm.send("s 0 t \n")

        for command in command_list:
            comm.send(f"{command}\n")
            output = ""

            if command.startswith("get"):
                while True:
                    output += comm.recv(65535).decode("utf-8")
                    if "Error: Failed to run this command because of insufficient storage space." in output:
                        with open("Errors.txt", "a") as storage_file:
                            storage_file.write(f"Insufficient storage for {ip}: {command}\n")
                        break
                    elif "already exists but it is smaller than the remote file" in output:
                        time.sleep(2)  # 2-second delay
                        break
                    elif "Please try a different file name" in output:
                        break
                    elif "same as the remote one. Overwrite it? [Y/N]:" in output:
                        break
                    elif "Transfer complete" in output:
                        break

            elif command.strip() == "Y":
                while True:
                    output += comm.recv(65535).decode("utf-8")
                    if "Transfer complete" in output:
                        break
                    if "Error: Failed to run this command because of insufficient storage space." in output:
                        with open("Errors.txt", "a") as storage_file:
                            storage_file.write(f"Insufficient storage for {ip}: {command}\n")
                        break
                    elif "The size of file" in output:
                        break
                    elif "Save the configuration successfully" in output:
                        break
                    elif "Error: Unrecognized command found" in output:
                        # Handle "Unrecognized command" error and break
                        with open("Errors.txt", "a") as error_file:
                            error_file.write(f"Unrecognized command for {ip}: {command}\n")
                        break
            elif command.strip() == "bye":
                while True:
                    output += comm.recv(65535).decode("utf-8")
                    if "Goodbye." in output:
                        break
            elif command.startswith("startup system-software"):
                while True:
                    output += comm.recv(65535).decode("utf-8")
                    if "Succeeded in setting the software" in output:
                        break
                    elif "Error: Software package verification failed. Please upload again." in output:
                        time.sleep(2)
                        with open("Errors.txt", "a") as storage_file:
                            storage_file.write(f"startup issue for {ip}: {command}\n")
                        break

            elif command.strip() == "save":
                while True:

                    time.sleep(2)  # 2-second delay
                    break

            elif command.strip() == "Y":
                while True:
                    output += comm.recv(65535).decode("utf-8")
                    if "Save the configuration successfully" in output:
                        break
                    elif "Error: Unrecognized command found" in output:
                        # Handle "Unrecognized command" error and break
                        with open("Errors.txt", "a") as error_file:
                            error_file.write(f"Unrecognized command for {ip}: {command}\n")
                        break

    except paramiko.AuthenticationException as e:
        error_message = f"Authentication failed for {ip}: {e}\n"
        print(error_message)
        authentication_failed_file.write(error_message)
    except Exception as ex:
        if "Errno None] Unable to connect to port 22" in str(ex):
            error_message = f"Can not do SSH on {ip}\n"
        elif "[WinError 10060] A connection attempt failed" in str(ex):
            error_message = f"Cannot ping {ip}\n"
        else:
            error_message = f"An error occurred with {ip}: {ex}\n"

        print(error_message)
        with open("Device_down.txt", "a") as device_down_file:
            device_down_file.write(error_message)
    finally:
        conn.close()


# Run SSH connections concurrently
with concurrent.futures.ThreadPoolExecutor() as executor:
    results = executor.map(execute_ssh, hosts)

authentication_failed_file = open("Authentication_failed.txt", "w")
total_ips = len(hosts)

# Record the end time and calculate the execution time
end_time = datetime.now()
print("Execution time:", end_time - start_time)
